

//     https://www.lintcode.com/problem/920

//     https://leetcode.com/problems/meeting-rooms-ii/


import java.util.*;
class Solution {

    public int minMeetingRooms(List<Interval> intervals) {

        if(intervals.size() <= 1){
            return 1;
        }

        int[] start = new int[intervals.size()];
        int[] end = new int[intervals.size()];

        int i = 0;
        for(Interval inv : intervals){
            start[i] = inv.start;
            end[i] = inv.end;
            i++;
        }

        Arrays.sort(start);
        Arrays.sort(end);

        i = 0;
        int j = 0;
        int count = 0;
        int reqd = 0;
        
        while( i < start.length && j < end.length){
            if(start[i] < end[j]){
                i++;
                count++;
            }else{
                j++;
                count--;
            }

            reqd = Math.max(count, reqd);
        }

        return reqd;

    }
       
}