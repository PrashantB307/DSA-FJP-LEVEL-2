

//   https://leetcode.com/problems/palindrome-partitioning/

//   https://practice.geeksforgeeks.org/problems/find-all-possible-palindromic-partitions-of-a-string/1


import java.util.*;
class Solution {

    boolean[][] ip;

    void iSPalindrome(String s){
        ip = new boolean[s.length()][s.length()];

        for(int g = 0; g < ip[0].length; g++){
            for(int i = 0, j = g; j < ip[0].length; i++, j++){
                if(g == 0){
                    ip[i][j] = true;
                }else if(g == 1){
                    ip[i][j] = s.charAt(i) == s.charAt(j);
                }else{
                    ip[i][j] = s.charAt(i) == s.charAt(j) && ip[i + 1][j - 1] == true;
                }
            }
        }
    }

    public List<List<String>> partition(String s) {
        
        iSPalindrome(s);
        List<List<String>>[] dp = new List[s.length()];
        return helper(s, s.length() - 1, dp);
    }

    public List<List<String>> helper(String s, int j, List[] dp){

        if( j < 0){
            List<List<String>> bres = new ArrayList<>();
            List<String> bList = new ArrayList<>();
            bres.add(bList);
            return bres;
        }

        if(dp[j] != null){
            return (List<List<String>>)dp[j];
        }

        List<List<String>> mres = new ArrayList<>();

        for(int i = j; i >= 0; i--){
            if(ip[i][j] == true){
                String palin = s.substring(i, j + 1);

                List<List<String>> rres = helper(s, i - 1, dp);
                for(List<String> rList : rres){
                    ArrayList<String> mlist = new ArrayList<>(rList);
                    mlist.add(palin);
                    mres.add(mlist);
                }
            }
        }

        dp[j] = mres;

        return mres;
    }
}

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


class Solution2 {
    static ArrayList<ArrayList<String>> allPalindromicPerms(String str) {
        
        ArrayList<ArrayList<String>> ans = new ArrayList<>();
        ArrayList<String> res = new ArrayList<>();
        helper(str, ans, res);

       return ans;
    }

    static void helper(String str, ArrayList<ArrayList<String>> ans, ArrayList<String> res){
        
        if(str.length() == 0){
            ans.add(new ArrayList<>(res));
            return ;
        }
        
        for(int i = 0; i < str.length(); i++){
            String prefix = str.substring(0, i + 1);
            String ros = str.substring(i + 1);
            
            if(isPalindrom(prefix)){
                res.add(prefix);
                helper(ros, ans, res);
                res.remove(res.size() - 1);
            }
        }
    }

    static boolean isPalindrom(String str){
        int l = 0;
        int r = str.length() - 1;

        while(l < r){
            char left = str.charAt(l);
            char right = str.charAt(r);
            if(left != right){
                return false;
            }

            l++;
            r--;
        }

        return true;
    }
}