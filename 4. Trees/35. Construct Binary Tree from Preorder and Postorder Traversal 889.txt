

//   https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/


import java.util.*;
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
class Solution {
    int postpreindex = 0;

    public TreeNode constructFromPrePost(int[] pre, int[] post) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < post.length; i++) {
            map.put(post[i], i);
        }
        return helper(pre, post, map, 0, post.length - 1);
    }

    private TreeNode helper(int[] preorder, int[] postorder, HashMap<Integer, Integer> map, int start, int end) {
        if (start > end) {
            return null;
        }

        TreeNode root = new TreeNode(preorder[postpreindex++]);

        if (start == end) {
            return root;
        }

        int index = map.get(preorder[postpreindex]);

        root.left = helper(preorder, postorder, map, start, index);
        root.right = helper(preorder, postorder, map, index + 1, end - 1);
        return root;
    }
}


// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



class Solution2 {
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {

        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < postorder.length; i++) {
            map.put(postorder[i], i);
        }

        TreeNode root = helper(preorder, postorder, map, 0, preorder.length - 1, 0, postorder.length - 1);

        return root;
    }

    public TreeNode helper(int[] pre, int[] post, HashMap<Integer, Integer> map, int prelo, int prehi, int postlo,
            int posthi) {

        if (prelo > prehi || postlo > posthi) {
            return null;
        }

        TreeNode node = new TreeNode(pre[prelo]);

        if (prelo + 1 <= prehi) {
            int idx = map.get(pre[postlo + 1]);
            int lhs = idx - postlo + 1;

            node.left = helper(pre, post, map, prelo + 1, prelo + lhs, postlo, idx);
            node.right = helper(pre, post, map, prelo + lhs + 1, prehi, idx + 1, posthi - 1);
        }

        return node;
    }
}